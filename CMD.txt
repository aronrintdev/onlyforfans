%%% Demo site
$ php artisan serve
$ npm run hot

# Main Laravel server
$ php artisan serve 

# Laravel queue worker
$ php artisan queue:work 

# Laravel Websockets server
$ php artisan websocket:serve 

# webpack service
$ npm run hot 
  ...or...
$ npm run watch 

------------------------

%%% Need to unzip js dist folder (!)
$ pushd public/js
$ unzip dist.zip

%%% Need to pull down vendor/stripe folder (??)
$ scp mjmfans:/home/fansplatformmjmd/fan/vendor-stripe.tgz .
$ tar xvzf vendor-stripe.tgz

%%% Composer
COMPOSER_MEMORY_LIMIT=-1 composer require ramsey/uuid
COMPOSER_MEMORY_LIMIT=-1 composer update

%%% Migrations
php artisan make:migration create_shareditems --create="shareditems"
php artisan migrate --env=testing
php artisan migrate:rollback --step=1

%%% Testing
$ vendor/bin/phpunit --group mfdev
$ vendor/bin/phpunit  -d memory_limit=-1 --testdox --group devcomment 
$ echo "" > storage/logs/laravel.log; vendor/bin/phpunit  -d memory_limit=-1 --testdox  --group this
$ echo "" > storage/logs/laravel.log; php -n vendor/bin/phpunit  -d memory_limit=-1 --testdox  --group regression
$ echo "" > storage/logs/laravel.log; php -n -dextension=intl.so vendor/bin/phpunit  -d memory_limit=-1 --testdox  --group regression

$ php artisan test --group=regression
$ php artisan test --group regression
$ php -n artisan test  --group regression

# stress testing...
$ for i in {1..10}; do php -n vendor/bin/phpunit --testdox  --group here; done

%%%
cp app/Patches/ThemeServiceProvider.php vendor/teepluss/theme/src/ThemeServiceProvider.php

# https://stackoverflow.com/questions/56605551/laravel-5-8-env-testing-file-is-not-working
$ php artisan config:cache --env=testing
$ php artisan config:cache --env=local

%%%
$ php artisan truncate:data
$ php artisan db:seed --class=UsernameRulesTableSeeder
$ php artisan db:seed --class=RolesTableSeeder
$ php artisan db:seed --class=UsersTableSeeder
$ php artisan db:seed --class=StoriesTableSeeder
$ php artisan db:seed --class=PostsTableSeeder
$ php artisan db:seed --class=ShareablesTableSeeder

# Run all seeds in test env (.env.testing)
$ php artisan db:seed --class=TestDatabaseSeeder

# Run all seeds in dev/staging/demo env (eg localhost, .env)
$ php artisan db:seed --class=DatabaseSeeder

%%% Clear route cache...may need to run this post-deployment
$ php artisan route:cache

%%% Tinker
$ php artisan tinker
$ php artisan tinker --env="testing"
>>> error_reporting(E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED)

%%%
ref: https://bitbucket.org/mjmdesign/fans-platform/pull-requests/19
$ php artisan websocket:serve

%%%
find app resources/views resources/assets \( -name "*.php" -o -name "*.vue" \) | xargs grep stories

mvim A-HERE.txt routes/web.php tests app/Http/Controllers resources/views resources/assets/js/

%%% cron/queue scripts
#$ php artisan setmf:basenames
$ php artisan make:thumbs 300
$ php artisan make:blurs 300

%%% new
$ sudo supervisorctl restart queue-work:*
...or...
$ sudo supervisorctl

$ sh ./install-env.sh 

%%% 20210628.PSG

# Create and seed a template DB
$ \rm database/template.sqlite; touch database/template.sqlite; DB_DATABASE="database/template.sqlite" DB_FINANCIAL_DATABASE="database/template.sqlite"   php artisan migrate:refresh --seed --database="template" --env="testing"
$ chmod 666 database/*.sqlite

# Run tests
$  echo "" > storage/logs/laravel.log; php -n   -dextension=intl.so  vendor/bin/phpunit -v  -d memory_limit=-1   --testdox  --group=comments
$ php artisan test --group regression-base
$ php artisan test --group regression-financial
$ php artisan test --group regression


# Sendgrid email test


$ DEBUG_FORCE_ENABLE_MAIL_NOTIFY=true DEBUG_BYPASS_SENDGRID_MAIL_NOTIFY=false DEBUG_ENABLE_SENDGRID_SANDBOX_MODE=false DEBUG_OVERRIDE_TO_EMAIL_FOR_SENDGRID="peter@peltronic.com" php artisan test --group="notify-via-sendgrid-unit"

$ DEBUG_FORCE_ENABLE_MAIL_NOTIFY=true DEBUG_BYPASS_SENDGRID_MAIL_NOTIFY=false DEBUG_ENABLE_SENDGRID_SANDBOX_MODE=true DEBUG_OVERRIDE_TO_EMAIL_FOR_SENDGRID="peter@peltronic.com" php artisan test --group="notify-via-sendgrid-unit"


---
% Manual repair of financial DB [accounts] table:

CREATE TABLE `accounts` (
  `id` char(36) COLLATE utf8_unicode_ci NOT NULL,
  `system` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `owner_type` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `owner_id` char(36) COLLATE utf8_unicode_ci NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `type` varchar(255) COLLATE utf8_unicode_ci NOT NULL COMMENT 'What type of account this is',
  `currency` varchar(3) COLLATE utf8_unicode_ci DEFAULT NULL,
  `balance` bigint(20) DEFAULT NULL,
  `balance_last_updated_at` timestamp NULL DEFAULT NULL,
  `pending` bigint(20) DEFAULT NULL,
  `pending_last_updated_at` timestamp NULL DEFAULT NULL,
  `resource_type` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `resource_id` char(36) COLLATE utf8_unicode_ci DEFAULT NULL,
  `verified` tinyint(1) NOT NULL DEFAULT '0',
  `can_make_transactions` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `accounts_owner_type_owner_id_index` (`owner_type`,`owner_id`),
  KEY `accounts_resource_type_resource_id_index` (`resource_type`,`resource_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;


% backup DB local
mysqldump -u {username} -p fansplat_dev > ~/fansplat_dev-bak--2021MMDD.sql
mysqldump -u {username} -p fansplat_financial_dev > ~/fansplat_financial_dev-bak--2021MMDD.sql

% Postgres override

DB_DRIVER=pgsql DB_PORT=5432 DB_FINANCIAL_DRIVER=pgsql DB_FINANCIAL_PORT=5432 php artisan migrate 
